//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "Form.h"
#include "Obj.h"
#include "Field.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TMainForm *MainForm;
TCanvas * Obj::device;
WorkingGrid Field;
Connectors AddConnect;


bool PosChoice = false;

bool ShapeChoice = false;

bool StartChoice = false;

bool SecondChoice = false;

bool ConnectionChoice = false;

int TagsChoice = 0;
//---------------------------------------------------------------------------
__fastcall TMainForm::TMainForm(TComponent* Owner)
	: TForm(Owner)
{
}
//---------------------------------------------------------------------------


void __fastcall TMainForm::Image7Click(TObject *Sender)
{
	Move->Checked = false;
	PosChoice = true;
	ShapeChoice = false;
	StartChoice = false;
	SecondChoice = false;
	Status->Caption = "Press to put ur element";
	TagsChoice = (dynamic_cast<TComponent *>(Sender))->Tag;
}
//---------------------------------------------------------------------------



void __fastcall TMainForm::FormMouseUp(TObject *Sender, TMouseButton Button, TShiftState Shift,
		  int X, int Y)
{
	ShapeS ChosenElem(0,0,-1);
		if (PosChoice) {
			if(TagsChoice == 0){
				IOShape *AddAbleObject = new IOShape(X,Y,TagsChoice);
				Field.AddShape(AddAbleObject);
				Field.ShapesOfField[Field.ShapesOfField.size()-1]->DrawObj(TagsChoice,X,Y);
		}
			else if(TagsChoice == 1){
				IFShape *AddAbleObject = new IFShape(X,Y,TagsChoice);
				Field.AddShape(AddAbleObject);
				Field.ShapesOfField[Field.ShapesOfField.size()-1]->DrawObj(TagsChoice,X,Y);
			}
			else if(TagsChoice == 2){
				LogicInS *AddAbleObject = new LogicInS(X,Y,TagsChoice);
				Field.AddShape(AddAbleObject);
				Field.ShapesOfField[Field.ShapesOfField.size()-1]->DrawObj(TagsChoice,X,Y);
			}
			else if(TagsChoice == 3){
				LogicOutS *AddAbleObject = new LogicOutS(X,Y,TagsChoice);
				Field.AddShape(AddAbleObject);
				Field.ShapesOfField[Field.ShapesOfField.size()-1]->DrawObj(TagsChoice,X,Y);
			}
			else if(TagsChoice == 4){
				ComProcS *AddAbleObject = new ComProcS(X,Y,TagsChoice);
				Field.AddShape(AddAbleObject);
				Field.ShapesOfField[Field.ShapesOfField.size()-1]->DrawObj(TagsChoice,X,Y);			}
			else if(TagsChoice == 5){
				ConnectS *AddAbleObject = new ConnectS(X,Y,TagsChoice);
				Field.AddShape(AddAbleObject);
				Field.ShapesOfField[Field.ShapesOfField.size()-1]->DrawObj(TagsChoice,X,Y);
			}
			else if(TagsChoice == 6){
				SEShape *AddAbleObject = new SEShape(X,Y,TagsChoice);
				Field.AddShape(AddAbleObject);
				Field.ShapesOfField[Field.ShapesOfField.size()-1]->DrawObj(TagsChoice,X,Y);
			}
			else if(TagsChoice == 7){
				CycleShape *AddAbleObject = new CycleShape(X,Y,TagsChoice);
				Field.AddShape(AddAbleObject);
				Field.ShapesOfField[Field.ShapesOfField.size()-1]->DrawObj(TagsChoice,X,Y);
			}
			else if(TagsChoice == 8){
				PreProcShape *AddAbleObject = new PreProcShape(X,Y,TagsChoice);
				Field.AddShape(AddAbleObject);
				Field.ShapesOfField[Field.ShapesOfField.size()-1]->DrawObj(TagsChoice,X,Y);
			}
			if(TagsChoice >= 0 && TagsChoice <= 9){
				PosChoice = false;
				Status->Caption = "Object added";
			}
	}
	else if (ShapeChoice) {
		SecondChoice= false;
		ShapeChoice = false;
		ValuesList->Cells[1][1] = "";
		ValuesList->Cells[1][2] = "";
		ValuesList->Cells[1][3] = "";
		Field.Choose(X,Y);
		if (Field.CurId >= 0)
		{
				ValuesList->Cells[1][1] = Field.ShapesOfField[Field.CurId]->XPos;
				ValuesList->Cells[1][2] = Field.ShapesOfField[Field.CurId]->YPos;
				ValuesList->Cells[1][3] = Field.ShapesOfField[Field.CurId]->Text;
				StartConnect->Enabled = true;
				Status->Caption = "Object Chosen";
		}
		else{
				  Status->Caption = "Object not found";
		}
	}
	else if (StartChoice) {  //ïåðâûé êëèê
		 if(Field.ChooseOPoint(X,Y)->X != 0 && Field.ChooseOPoint(X,Y)->Y != 0){
			AddConnect.StartPoint = Field.ChooseOPoint(X,Y);
			Status->Caption = "OutPut Point Chosen";
			SecondChoice = true;
			StartChoice = false;
		 }
		 else{
			 Status->Caption = "Not found or already chosen";
		 }
	}
	else if(SecondChoice){ //2 êëèê
		if (Field.ChooseIPoint(X,Y)->X != 0 && Field.ChooseIPoint(X,Y)->Y != 0) {
			AddConnect.EndPoint = Field.ChooseIPoint(X,Y);
			Field.AddConnector(AddConnect);
			Status->Caption = "Input Point Chosen";
			Field.ConnectorsOfField[Field.ConnectorsOfField.size()-1].DrawObj(Field.ConnectorsOfField[Field.ConnectorsOfField.size()-1].StartPoint->X,
																			  Field.ConnectorsOfField[Field.ConnectorsOfField.size()-1].StartPoint->Y,
																			  Field.ConnectorsOfField[Field.ConnectorsOfField.size()-1].EndPoint->X,
																			  Field.ConnectorsOfField[Field.ConnectorsOfField.size()-1].EndPoint->Y,
																			  Field.ShapesOfField);
			for (int i = 0; i < Field.ConnectorsOfField.size(); i++) {
				if (Field.ConnectorsOfField[i].ConnectorWay.size() == 0) {
					Field.ConnectorsOfField.erase(Field.ConnectorsOfField.begin()+i);
				}
			}
			SecondChoice = false;
		}
		else{
			Status->Caption = "Not found";
		}
	}
	else if (ConnectionChoice) {
		Field.DeleteÑonnectors(X,Y);
		ConnectionChoice = false;
	}


	if(Grid->Checked){
		Field.GridSetting();
	}
}
//---------------------------------------------------------------------------


void __fastcall TMainForm::repaint1Click(TObject *Sender)
{
	Field.GenerateGrid(ScrollBox1->Width,ScrollBox1->Top,ScrollBox2->Left,ScrollBox2->Height);
}
//---------------------------------------------------------------------------



void __fastcall TMainForm::ChooseElemClick(TObject *Sender)
{
	Move->Checked = false;
	PosChoice = false;
	ShapeChoice = true;
	StartChoice = false;
	SecondChoice = false;
	Status->Caption = "Press on element to choose";
}
//---------------------------------------------------------------------------




void __fastcall TMainForm::DeleteElemClick(TObject *Sender)
{
	Move->Checked = false;
	SecondChoice = false;
	ValuesList->Cells[1][1] = "";
	ValuesList->Cells[1][2] = "";
	ValuesList->Cells[1][3] = "";
	Field.DeleteElements();
	Field.Repaint();
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::FormCreate(TObject *Sender)
{
	Obj::device = this->Canvas;
	Field.GenerateGrid(ScrollBox1->Width,ScrollBox1->Top,ScrollBox2->Left,ScrollBox2->Height);
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::MoveClick(TObject *Sender)
{
	PosChoice = false;
	ShapeChoice = false;
	StartChoice = false;
	Status->Caption = "Press on field to move chosen element";
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::ClearAll1Click(TObject *Sender)
{
	Move->Checked = false;
	SecondChoice = false;
	ValuesList->Cells[1][1] = "";
	ValuesList->Cells[1][2] = "";
	ValuesList->Cells[1][3] = "";
	Field.ClearAll();
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::GridClick(TObject *Sender)
{
	if (Grid->Checked) {
		Field.GridSetting();
	}	
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::StartConnectClick(TObject *Sender)
{
	StartChoice = true;
	PosChoice = false;
	ShapeChoice = false;
	Move->Checked = false;
	Status->Caption = "Press on other element to connect";
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::DeleteConnectionClick(TObject *Sender)
{
	ConnectionChoice = true;
	StartChoice = false;
	PosChoice = false;
	ShapeChoice = false;
	Move->Checked = false;
	SecondChoice = false;
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::FormMouseMove(TObject *Sender, TShiftState Shift, int X,
          int Y)
{
	if (Move->Checked && Shift.Contains(ssLeft) && Field.CurId >= 0) {
		if (ValuesList->Cells[1][1] != "" && ValuesList->Cells[1][2]!= "") {
					Field.ShapesOfField[Field.CurId]->Move(X,Y);
					Field.Repaint();
					ValuesList->Cells[1][1] = X;
					ValuesList->Cells[1][2] = Y;
		}
	}
}
//---------------------------------------------------------------------------


void __fastcall TMainForm::ValuesListStringsChange(TObject *Sender)
{
	if (ValuesList->Cells[1][1] != "" && ValuesList->Cells[1][2]!= "" && ValuesList->Cells[1][3]!= "" &&
		ValuesList->Cells[1][1] != "-" && ValuesList->Cells[1][2]!= "-") {
			Field.ShapesOfField[Field.CurId]->Move(ValuesList->Cells[1][1].ToInt(),ValuesList->Cells[1][2].ToInt());
			Field.ShapesOfField[Field.CurId]->Text = ValuesList->Cells[1][3];
	}
	Field.Repaint();
}
//---------------------------------------------------------------------------





void __fastcall TMainForm::FormMouseWheelDown(TObject *Sender, TShiftState Shift,
          TPoint &MousePos, bool &Handled)
{
	for (int i = 0; i < Field.ShapesOfField.size(); i++) {
		Field.ShapesOfField[i]->Move(Field.ShapesOfField[i]->XPos,Field.ShapesOfField[i]->YPos+10);
	}
	ValuesList->Cells[1][1] = "";
	ValuesList->Cells[1][2] = "";
	ValuesList->Cells[1][3] = "";
	Field.Repaint();
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::FormMouseWheelUp(TObject *Sender, TShiftState Shift, TPoint &MousePos,
          bool &Handled)
{
	for (int i = 0; i < Field.ShapesOfField.size(); i++) {
		Field.ShapesOfField[i]->Move(Field.ShapesOfField[i]->XPos,Field.ShapesOfField[i]->YPos-10);
	}
	ValuesList->Cells[1][1] = "";
	ValuesList->Cells[1][2] = "";
	ValuesList->Cells[1][3] = "";
	Field.Repaint();
}
//---------------------------------------------------------------------------




void __fastcall TMainForm::Save1Click(TObject *Sender)
{
	if (SaveDialog1->Execute()) {
		TStringList *Pars=new TStringList;
		for (int i = 0; i < Field.ShapesOfField.size(); i++) {
			Pars->Add("//--S");
			Pars->Add(Field.ShapesOfField[i]->Type);
			Pars->Add(Field.ShapesOfField[i]->XPos);
			Pars->Add(Field.ShapesOfField[i]->YPos);
			Pars->Add(Field.ShapesOfField[i]->Text);
		}
		for (int i = 0; i < Field.ConnectorsOfField.size(); i++) {
			Pars->Add("//--C");
			Pars->Add(Field.ConnectorsOfField[i].StartPoint->X);
			Pars->Add(Field.ConnectorsOfField[i].StartPoint->Y);
			Pars->Add(Field.ConnectorsOfField[i].EndPoint->X);
			Pars->Add(Field.ConnectorsOfField[i].EndPoint->Y);
		}
		Pars->SaveToFile(SaveDialog1->FileName);
	}
}
//---------------------------------------------------------------------------

void __fastcall TMainForm::Load1Click(TObject *Sender)
{
	TStringList *Pars=new TStringList;
	if (OpenDialog1->Execute()) {
	   Pars->LoadFromFile(OpenDialog1->FileName);
	   Field.ShapesOfField.clear();
	   Field.ConnectorsOfField.clear();
	   for (int i = 0; i < Pars->Count; i++) {
		if (Pars[i].Text == "//--S") {
			if (Pars[i].Text) {
				if(Pars[i+1].Text == 0){
					IOShape *AddAbleObject = new IOShape(X,Y,TagsChoice);
					Field.AddShape(AddAbleObject);
					Field.ShapesOfField[Field.ShapesOfField.size()-1]->DrawObj(TagsChoice,X,Y);
				}
				else if(Pars[i+1].Text == "1"){
					IFShape *AddAbleObject = new IFShape(X,Y,TagsChoice);
					Field.AddShape(AddAbleObject);
					Field.ShapesOfField[Field.ShapesOfField.size()-1]->DrawObj(TagsChoice,X,Y);
				}
				else if(Pars[i+1].Text == "2"){
					LogicInS *AddAbleObject = new LogicInS(X,Y,TagsChoice);
					Field.AddShape(AddAbleObject);
					Field.ShapesOfField[Field.ShapesOfField.size()-1]->DrawObj(TagsChoice,X,Y);
				}
				else if(Pars[i+1].Text == "3"){
					LogicOutS *AddAbleObject = new LogicOutS(X,Y,TagsChoice);
					Field.AddShape(AddAbleObject);
					Field.ShapesOfField[Field.ShapesOfField.size()-1]->DrawObj(TagsChoice,X,Y);
				}
				else if(Pars[i+1].Text == "4"){
					ComProcS *AddAbleObject = new ComProcS(X,Y,TagsChoice);
					Field.AddShape(AddAbleObject);
					Field.ShapesOfField[Field.ShapesOfField.size()-1]->DrawObj(TagsChoice,X,Y);			}
				else if(Pars[i+1].Text == "5"){
					ConnectS *AddAbleObject = new ConnectS(X,Y,TagsChoice);
					Field.AddShape(AddAbleObject);
					Field.ShapesOfField[Field.ShapesOfField.size()-1]->DrawObj(TagsChoice,X,Y);
				}
				else if(Pars[i+1].Text == "6"){
					SEShape *AddAbleObject = new SEShape(X,Y,TagsChoice);
					Field.AddShape(AddAbleObject);
					Field.ShapesOfField[Field.ShapesOfField.size()-1]->DrawObj(TagsChoice,X,Y);
				}
				else if(Pars[i+1].Text == "7"){
					CycleShape *AddAbleObject = new CycleShape(X,Y,TagsChoice);
					Field.AddShape(AddAbleObject);
					Field.ShapesOfField[Field.ShapesOfField.size()-1]->DrawObj(TagsChoice,X,Y);
				}
				else if(Pars[i+1].Text == "8"){
					PreProcShape *AddAbleObject = new PreProcShape(X,Y,TagsChoice);
					Field.AddShape(AddAbleObject);
					Field.ShapesOfField[Field.ShapesOfField.size()-1]->DrawObj(TagsChoice,X,Y);
				}
			}
		}
	   }
	}
}
//---------------------------------------------------------------------------

