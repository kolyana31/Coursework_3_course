#include "Field.h"
#include <vector>



void WorkingGrid::AddShape(ShapeS* AddableObject){
	ShapesOfField.push_back(AddableObject);
	Repaint();
}

void WorkingGrid::AddConnector(Connectors AddableConnector){
	ConnectorsOfField.push_back(AddableConnector);
	Repaint();
}

void WorkingGrid::Repaint(){
	Obj::device->Brush->Color = clWhite;
	Obj::device->FillRect(Obj::device->ClipRect);
	Obj::device->Brush->Color = clWebCrimson;
	for (int i = 0; i < ShapesOfField.size(); i++) {
		ShapesOfField[i]->DrawObj(ShapesOfField[i]->Type, ShapesOfField[i]->XPos, ShapesOfField[i]->YPos);
	}
	for (int i = 0; i < ConnectorsOfField.size(); i++) {
		ConnectorsOfField[i].DrawObj(ConnectorsOfField[i].StartPoint->X,
									 ConnectorsOfField[i].StartPoint->Y,
									 ConnectorsOfField[i].EndPoint->X,
									 ConnectorsOfField[i].EndPoint->Y,
									 ShapesOfField);
	}
}

ShapeS* WorkingGrid::Choose(int XChoice, int YChoice){
	for (int i = 0; i < ShapesOfField.size(); i++) {
		ShapesOfField[i]->Selected = false;
	}
	CurId = -1;
	for (int i = ShapesOfField.size()-1; i >= 0; i--) {
		if (XChoice > ShapesOfField[i]->XPos && XChoice < ShapesOfField[i]->Wight &&
			YChoice > ShapesOfField[i]->YPos && YChoice < ShapesOfField[i]->Height)
		{
			ShapesOfField[i]->Selected = true;
			CurId
			return ShapesOfField[i];
		}
	}
	ShapeS* Nothing = new ShapeS(0,0,-1);
	return Nothing;
}

TPoint* WorkingGrid::ChooseOPoint(int XChoice, int YChoice){
	TPoint* Point = new TPoint; Point->X = 0; Point->Y = 0;
	for (int i = ShapesOfField.size()-1; i >= 0; i--) {
		if (XChoice > ShapesOfField[i]->XPos && XChoice < ShapesOfField[i]->Wight &&
			YChoice > ShapesOfField[i]->YPos && YChoice < ShapesOfField[i]->Height)
		{
		switch (ShapesOfField[i]->Type) {
			case 1:
				if (XChoice < (ShapesOfField[i]->XPos+ShapesOfField[i]->Wight)/2) {
					for (int d = 0; d < ConnectorsOfField.size(); d++) {
						if (ConnectorsOfField[d].StartPoint->X == ShapesOfField[i]->ExitPoints[0]->X &&
							ConnectorsOfField[d].StartPoint->Y == ShapesOfField[i]->ExitPoints[0]->Y) {
							return Point;
						}
					}
					return ShapesOfField[i]->ExitPoints[0];
				}
				else{
					for (int d = 0; d < ConnectorsOfField.size(); d++) {
						if (ConnectorsOfField[d].StartPoint->X == ShapesOfField[i]->ExitPoints[1]->X &&
							ConnectorsOfField[d].StartPoint->Y == ShapesOfField[i]->ExitPoints[1]->Y) {
							return Point;
						}
					 }
					return ShapesOfField[i]->ExitPoints[1];
				}
				break;
			case 7:
				if (XChoice > ShapesOfField[i]->Wight-50) {
					for (int d = 0; d < ConnectorsOfField.size(); d++) {
						if (ConnectorsOfField[d].StartPoint->X == ShapesOfField[i]->ExitPoints[0]->X &&
							ConnectorsOfField[d].StartPoint->Y == ShapesOfField[i]->ExitPoints[0]->Y) {
							return Point;
						}
					}
					return ShapesOfField[i]->ExitPoints[0];
				}
				else{
					for (int d = 0; d < ConnectorsOfField.size(); d++) {
						if (ConnectorsOfField[d].StartPoint->X == ShapesOfField[i]->ExitPoints[1]->X &&
							ConnectorsOfField[d].StartPoint->Y == ShapesOfField[i]->ExitPoints[1]->Y) {
							return Point;
						}
					}
				   return ShapesOfField[i]->ExitPoints[1];
				}
				break;
			default:
					for (int j = 0; j < ShapesOfField[i]->ExitPoints.size(); j++) {
						 for (int d = 0; d < ConnectorsOfField.size(); d++) {
							if (ConnectorsOfField[d].StartPoint->X == ShapesOfField[i]->ExitPoints[j]->X &&
								ConnectorsOfField[d].StartPoint->Y == ShapesOfField[i]->ExitPoints[j]->Y) {
								return Point;
							}
						 }
					}
					return ShapesOfField[i]->ExitPoints[ShapesOfField[i]->EnterPoints.size()-1];
				break;
			}
		}
	}
	return Point;
}

TPoint* WorkingGrid::ChooseIPoint(int XChoice, int YChoice){
	TPoint* Point = new TPoint;Point->X = 0; Point->Y = 0;
	for (int i = ShapesOfField.size()-1; i >= 0; i--) {
		if (XChoice > ShapesOfField[i]->XPos && XChoice < ShapesOfField[i]->Wight &&
			YChoice > ShapesOfField[i]->YPos && YChoice < ShapesOfField[i]->Height)
		{
			switch (ShapesOfField[i]->Type) {
			case 7:
					if (XChoice > ShapesOfField[i]->XPos+50) {
							return ShapesOfField[i]->EnterPoints[0];
					}
					else{
							return ShapesOfField[i]->EnterPoints[1];
					}
				break;
			default:
				return ShapesOfField[i]->EnterPoints[ShapesOfField[i]->EnterPoints.size()-1];
				break;
			}
		}
	}
	return Point;
}

void WorkingGrid::DeleteElements(){
	for (int i = 0; i < ShapesOfField.size(); i++) {
		if(ShapesOfField[i]->Selected){
			for (int j = 0; j < ShapesOfField[i]->EnterPoints.size(); j++) {
				for (int k = 0; k < ConnectorsOfField.size(); k++) {
					if (ShapesOfField[i]->EnterPoints[j]->X == ConnectorsOfField[k].EndPoint->X &&
						ShapesOfField[i]->EnterPoints[j]->Y == ConnectorsOfField[k].EndPoint->Y)
					{
                    	ConnectorsOfField.erase(ConnectorsOfField.begin()+k);
					}
				}

			}

			for (int j = 0; j < ShapesOfField[i]->ExitPoints.size(); j++) {
				for (int k = 0; k < ConnectorsOfField.size(); k++) {
					if (ShapesOfField[i]->ExitPoints[j]->X == ConnectorsOfField[k].StartPoint->X &&
						ShapesOfField[i]->ExitPoints[j]->Y == ConnectorsOfField[k].StartPoint->Y)
					{
                    	ConnectorsOfField.erase(ConnectorsOfField.begin()+k);
					}
				}

			}
			ShapesOfField.erase(ShapesOfField.begin()+i);
		}
	}
	Repaint();
}

void WorkingGrid::DeleteÑonnectors(int XChoice, int YChoice){
	for (int i = ConnectorsOfField.size()-1; i >= 0; i--) {
			if (
				((XChoice > ConnectorsOfField[i].StartPoint->X-5 && XChoice < ConnectorsOfField[i].EndPoint->X+5 &&
				 (YChoice > ConnectorsOfField[i].StartPoint->Y && YChoice < ConnectorsOfField[i].EndPoint->Y ||
				  YChoice < ConnectorsOfField[i].StartPoint->Y && YChoice > ConnectorsOfField[i].EndPoint->Y)) ||
				((XChoice < ConnectorsOfField[i].StartPoint->X+5 && XChoice > ConnectorsOfField[i].EndPoint->X-5 &&
				 (YChoice > ConnectorsOfField[i].StartPoint->Y && YChoice < ConnectorsOfField[i].EndPoint->Y ||
				 YChoice < ConnectorsOfField[i].StartPoint->Y && YChoice > ConnectorsOfField[i].EndPoint->Y)))
				 )
			   )
			{
				ConnectorsOfField.erase(ConnectorsOfField.begin()+i);
				break;
			}
	}
	Repaint();
}

void WorkingGrid::GenerateGrid(int X,int Y,int W,int H){
	GridCord.clear();
	TPoint Value;
	for (int i = X; i < W; i+=15) {
		for (int j = Y; j < H; j+=15) {
			Value.X = i;
			Value.Y = j;
			GridCord.push_back(Value);
		}
	}
	Repaint();
}

void WorkingGrid::GridSetting(){
	for (int j = 0; j < ShapesOfField.size(); j++) {
		for (int i = 0; i < GridCord.size(); i++) {
			if (ShapesOfField[j]->XPos > GridCord[i].X && ShapesOfField[j]->XPos < GridCord[i].X + 15 &&
				ShapesOfField[j]->YPos > GridCord[i].Y && ShapesOfField[j]->YPos < GridCord[i].Y + 15) {

				ShapesOfField[j]->Move(GridCord[i].X,GridCord[i].Y);
				ShapesOfField[j]->XPos = GridCord[i].X;
				ShapesOfField[j]->YPos = GridCord[i].Y;

				continue;
			}
		}
	}
	Repaint();
}

void WorkingGrid::ClearAll(){
   ShapesOfField.clear();
   ConnectorsOfField.clear();
   Repaint();
}

